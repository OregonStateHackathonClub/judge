generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id            String         @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Sessions[]
  accounts      Accounts[]
  teams         UsersToTeams[]
  profiles      UserProfiles[]

  @@unique([email])
  @@map("user")
}

model UserProfiles {
  id     String @id @default(cuid())
  userId String
  appId  String

  // other app specific data

  user Users @relation(fields: [userId], references: [id])

  @@unique([userId, appId])
}

model Sessions {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      Users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Accounts {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  Users     @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  Teams                 Teams[]

  @@map("account")
}

model Verifications {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Hackathons {
  id          String        @id
  name        String        @unique
  year        String
  sponsors    String
  rubric      Json
  description String?
  teams       Teams[]
  submissions Submissions[]
  tracks      Tracks[]

  @@map("hackathons")
}

model Teams {
  teamId       String         @id
  name         String
  lookingForTeammates Boolean @default(false)
  description  String?
  leaderId     String?
  submissionId String?
  hackathonId  String
  //relations
  leader       Accounts?       @relation(fields: [leaderId], references: [id])
  submission   Submissions?   @relation(fields: [submissionId], references: [id])
  hackathon    Hackathons     @relation(fields: [hackathonId], references: [id])
  users        UsersToTeams[]

  @@map("teams")
}

model UsersToTeams {
  teamId String
  userId String
  // relations
  team   Teams  @relation(fields: [teamId], references: [teamId])
  user   Users  @relation(fields: [userId], references: [id])

  @@id([teamId, userId])
  @@map("userToTeams")
}

model Submissions {
  id          String                @id
  status      String                
  name        String                @default("")
  miniDescription String            @default("")
  bio         String                @default("")
  githubURL   String                @default("")
  ytVideo     String                @default("")
  images      String                @default("")
  comments    String                @default("")
  rubric      Json                  @default("{}")
  score       Int                   @default(0)
  hackathonId String
  // relations
  hackathon   Hackathons            @relation(fields: [hackathonId], references: [id])
  trackLinks  TracksToSubmissions[]
  Team        Teams[]

  @@map("submissions")
}

model Tracks {
  id          String                @id
  name        String
  description String
  hackathonId String
  //realtions
  hackathon   Hackathons            @relation(fields: [hackathonId], references: [id])
  submissions TracksToSubmissions[]

  @@map("track")
}

model TracksToSubmissions {
  trackId      String
  submissionId String
  // relations
  track        Tracks      @relation(fields: [trackId], references: [id])
  submission   Submissions @relation(fields: [submissionId], references: [id])

  @@id([trackId, submissionId])
  @@map("mergeTrack")
}
