generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  teams    UserToTeams[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Hackathons {
    id          String         @id
    name        String      @unique
    year        String
    sponsors    String
    rubric      Json
    description String?
    teams       Teams[]
    submissions Submissions[]
    tracks      Tracks[]

    @@map("hackathons")
}

model Teams {
    teamId       String          @id
    name         String
    submissionId String          
    hackathonId  String
    //relations
    submission   Submissions   @relation(fields: [submissionId], references: [id])
    hackathon    Hackathons    @relation(fields: [hackathonId], references: [id])
    users        UserToTeams[]
    @@map("teams")
}

model UserToTeams {
    teamId String
    userId String
    // relations
    team Teams @relation(fields: [teamId], references: [teamId])
    user User @relation(fields: [userId], references: [id])
    @@id([teamId, userId])
    @@map("userToTeams")
}

model Submissions {
    id           String      @id
    name         String
    bio          String
    githubURL    String
    ytVideo      String
    images       String
    comments     String
    rubric       Json
    score        Int
    hackathonId  String
    // relations
    hackathon    Hackathons @relation(fields: [hackathonId], references: [id])
    trackLinks   MergeTracks[]
    Team Teams[]
    @@map("submissions")
}

model Tracks {
    id          String          @id
    name        String
    description String
    hackathonId String
    //realtions
    hackathon   Hackathons    @relation(fields: [hackathonId], references: [id])
    submissions MergeTracks[]
    @@map("track")
}

model MergeTracks {
    trackId      String
    submissionId String
    // relations
    track      Tracks      @relation(fields: [trackId], references: [id])
    submission Submissions @relation(fields: [submissionId], references: [id])
    @@id([trackId, submissionId])
    @@map("mergeTrack")
}
