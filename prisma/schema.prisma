generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                  @id @default(cuid())
  name                  String
  email                 String                  @unique
  emailVerified         Boolean                 @default(false)
  image                 String?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime
  role                  UserRole                @default(USER)
  accounts              Account[]
  application           application?
  hackathon_participant hackathon_participant[]
  sessions              Session[]

  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime? @default(now())
  updatedAt  DateTime?

  @@map("verification")
}

model Tracks {
  id               String             @id @default(cuid())
  name             String
  description      String
  hackathonId      String
  createdAt        DateTime           @default(now())
  prize            String?
  submission_track submission_track[]
  hackathon        hackathon          @relation(fields: [hackathonId], references: [id], onDelete: Cascade)

  @@map("track")
}

model application {
  id             String            @id
  createdAt      DateTime          @default(now())
  userId         String            @unique
  university     String
  graduationYear Int
  shirtSize      ShirtSize
  resumePath     String
  status         ApplicationStatus @default(APPLIED)
  user           User              @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model hackathon {
  id                    String                  @id
  name                  String                  @unique
  description           String?
  rubric                Json                    @default("{}")
  createdAt             DateTime                @default(now())
  updatedAt             DateTime
  hackathon_participant hackathon_participant[]
  judge_assignment      judge_assignment[]
  submission            submission[]
  team                  team[]
  tracks                Tracks[]
}

model hackathon_participant {
  id          String       @id
  userId      String
  hackathonId String
  joinedAt    DateTime     @default(now())
  hackathon   hackathon    @relation(fields: [hackathonId], references: [id], onDelete: Cascade)
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  team_member team_member?

  @@unique([userId, hackathonId])
}

model invite {
  id        String    @id
  code      String    @unique
  teamId    String
  createdAt DateTime  @default(now())
  expiresAt DateTime?
  team      team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model judge {
  id               String             @id
  name             String
  email            String             @unique
  magicLinkToken   String?            @unique
  tokenExpiresAt   DateTime?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  judge_assignment judge_assignment[]
  score            score[]
}

model judge_assignment {
  id          String    @id
  judgeId     String
  hackathonId String
  role        JudgeRole @default(JUDGE)
  assignedAt  DateTime  @default(now())
  hackathon   hackathon @relation(fields: [hackathonId], references: [id], onDelete: Cascade)
  judge       judge     @relation(fields: [judgeId], references: [id], onDelete: Cascade)

  @@unique([judgeId, hackathonId])
}

model score {
  id           String     @id
  submissionId String
  judgeId      String
  rubricScores Json       @default("{}")
  totalScore   Int        @default(0)
  comments     String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime
  judge        judge      @relation(fields: [judgeId], references: [id], onDelete: Cascade)
  submission   submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@unique([submissionId, judgeId])
}

model submission {
  id               String             @id
  teamId           String             @unique
  hackathonId      String
  name             String
  tagline          String             @default("")
  description      String             @default("")
  githubUrl        String             @default("")
  videoUrl         String             @default("")
  images           String[]           @default([])
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  score            score[]
  hackathon        hackathon          @relation(fields: [hackathonId], references: [id], onDelete: Cascade)
  team             team               @relation(fields: [teamId], references: [id], onDelete: Cascade)
  submission_track submission_track[]
}

model submission_track {
  submissionId String
  trackId      String
  submission   submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  track        Tracks     @relation(fields: [trackId], references: [id], onDelete: Cascade)

  @@id([submissionId, trackId])
}

model team {
  id                  String        @id
  name                String
  description         String?
  lookingForTeammates Boolean       @default(false)
  contact             String?
  leaderId           String
  hackathonId         String
  createdAt           DateTime      @default(now())
  updatedAt           DateTime
  invite              invite[]
  submission          submission?
  hackathon           hackathon     @relation(fields: [hackathonId], references: [id], onDelete: Cascade)
  team_member         team_member[]
}

model team_member {
  id                    String                @id
  teamId                String
  participantId         String                @unique
  joinedAt              DateTime              @default(now())
  hackathon_participant hackathon_participant @relation(fields: [participantId], references: [id], onDelete: Cascade)
  team                  team                  @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

enum ApplicationStatus {
  APPLIED
  CHECKED_IN
}

enum JudgeRole {
  JUDGE
  ADMIN
}

enum ShirtSize {
  XS
  S
  M
  L
  XL
  XXL
}

enum UserRole {
  USER
  SUPERADMIN
}
