generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  judgeProfile JudgeProfile?

  @@unique([email])
  @@map("user")
}

model JudgeProfile {
  userId String @id
  user   User   @relation(fields: [userId], references: [id])

  teams UsersToTeams[]

  @@map("judgeProfile")
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  Teams                 Teams[]

  @@map("account")
}

model Verification {
  id         String    @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Hackathons {
  id          String        @id
  name        String        @unique
  sponsors    String
  rubric      Json
  description String?
  teams       Teams[]
  submissions Submissions[]
  tracks      Tracks[]

  @@map("hackathons")
}

model Teams {
  teamId              String  @id @default(cuid())
  name                String
  lookingForTeammates Boolean @default(false)
  description         String?
  leaderId            String?
  contact             String?
  submissionId        String?
  hackathonId         String

  //relations
  leader     Account?       @relation(fields: [leaderId], references: [id])
  submission Submissions?   @relation(fields: [submissionId], references: [id])
  hackathon  Hackathons     @relation(fields: [hackathonId], references: [id])
  users      UsersToTeams[]
  invites    Invites[]

  @@map("teams")
}

model UsersToTeams {
  teamId         String
  judgeProfileId String
  // relations
  team           Teams        @relation(fields: [teamId], references: [teamId])
  judgeProfile   JudgeProfile @relation(fields: [judgeProfileId], references: [userId])

  @@id([teamId, judgeProfileId])
  @@map("userToTeams")
}

model Submissions {
  id              String   @id @default(cuid())
  status          String
  name            String   @default("")
  miniDescription String   @default("")
  bio             String   @default("")
  githubURL       String   @default("")
  ytVideo         String   @default("")
  images          String[] @default([])
  comments        String   @default("")
  rubric          Json     @default("{}")
  score           Int      @default(0)
  hackathonId     String

  // relations
  hackathon  Hackathons            @relation(fields: [hackathonId], references: [id])
  trackLinks TracksToSubmissions[]
  Team       Teams[]

  @@map("submissions")
}

model Tracks {
  id          String                @id @default(cuid())
  name        String
  description String
  hackathonId String
  //realtions
  hackathon   Hackathons            @relation(fields: [hackathonId], references: [id])
  submissions TracksToSubmissions[]

  @@map("track")
}

model TracksToSubmissions {
  trackId      String
  submissionId String
  // relations
  track        Tracks      @relation(fields: [trackId], references: [id])
  submission   Submissions @relation(fields: [submissionId], references: [id])

  @@id([trackId, submissionId])
  @@map("mergeTrack")
}

model Invites {
  teamId String
  code   String @id @default(cuid())

  teams Teams? @relation(fields: [teamId], references: [teamId])

  @@index([teamId])
}
